Primer taller de base de datos/ Corte 3 

DISPARADORES
¿QUE SON?
Un disparador es un mecanismo que permite ejecutar automáticamente una función (llamada función de disparador) cuando ocurre un evento específico como:
INSERT, UPDATE, DELETE y TRUNCATE
¿PARA QUE SIRVEN?
Auditoría de datos
Registrar quién y cuándo se modificaron ciertos registros (por ejemplo, guardar cambios en una tabla de logs).
Validación adicional
Aplicar validaciones complejas que no se pueden hacer fácilmente con restricciones (CHECK, FOREIGN KEY, etc.).
Sincronización de tablas
Mantener la coherencia entre diferentes tablas (por ejemplo, actualizar el stock cuando se crea una venta).
Control de negocio automático
Ejecutar acciones automáticas cuando se modifican datos (como calcular automáticamente impuestos o descuentos).
Restricciones personalizadas
Prevenir ciertos cambios si no cumplen reglas específicas (por ejemplo, evitar eliminar registros importantes).

VENTAJAS DE LOS DISPARADORES
Automatización de tareas: Permiten ejecutar acciones automáticas al modificar datos, reduciendo la necesidad de lógica repetitiva en el código de la aplicación.
Integridad de datos: 	Refuerzan reglas de negocio o validaciones complejas que no se pueden establecer fácilmente con restricciones estándar.
Auditoría y seguimiento:	Son ideales para registrar cambios (quién, cuándo, qué cambió), facilitando la trazabilidad.
Consistencia entre tablas:	Permiten mantener sincronización automática entre tablas relacionadas.
Reutilización de lógica: 	Una función de disparador puede aplicarse a múltiples tablas o eventos, centralizando la lógica del negocio.

DESVENTAJAS DE LOS DISPARADORES
Dificultan el mantenimiento:	La lógica puede estar oculta en la base de datos, lo que hace más difícil entender o depurar el comportamiento general del sistema.
Impacto en el rendimiento:	Pueden ralentizar operaciones si las funciones de disparador son pesadas o mal optimizadas.
Complejidad adicional:	Agregan una capa extra de lógica que puede ser difícil de probar y controlar, especialmente si hay muchos disparadores encadenados.
Riesgo de efectos colaterales:	Una modificación puede desencadenar otras sin que el desarrollador lo note, generando resultados inesperados.
Portabilidad limitada:	El uso intensivo de triggers puede dificultar migraciones a otros sistemas de bases de datos que no los soporten igual.


SINTAXIS DE UN TRIGGER
CREATE TRIGGER nombre_del_trigger
{ BEFORE | AFTER | INSTEAD OF } { INSERT | UPDATE | DELETE | TRUNCATE }
ON nombre_tabla
[ FOR EACH ROW | FOR EACH STATEMENT ]
[ WHEN (condición) ]  -- (opcional)
EXECUTE FUNCTION nombre_funcion_trigger();

Antes de crear un trigger se necesita una funcion que es la que se ejecutará cuando ocurra el evento.


CASOS DE USO PARA UNA BASE DE DATOS DE RESTAURANTE
Supongamos que queremos cuando una comanda cambia a estado "closed", queremos que automáticamente se marque la mesa como "free"

CREATE OR REPLACE FUNCTION free_table_after_closing()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.state = 'closed' THEN
        UPDATE tables
        SET state = 'free'
        WHERE table_id = NEW.table_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_free_table
AFTER UPDATE ON commands
FOR EACH ROW
WHEN (OLD.state IS DISTINCT FROM NEW.state)
EXECUTE FUNCTION free_table_after_closing();



Cuando se inserta una factura, esta función calcula el total sumando el precio de todos los platos relacionados con esa comanda.

CREATE OR REPLACE FUNCTION calculate_invoice_total()
RETURNS TRIGGER AS $$
DECLARE
    total_amount NUMERIC(10,2);
BEGIN
    SELECT SUM(d.price * dc.quantity)
    INTO total_amount
    FROM dishes d
    JOIN dish_com dc ON d.dish_id = dc.dish_id
    WHERE dc.command_id = NEW.command_id;

    NEW.total := COALESCE(total_amount, 0);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_calculate_invoice_total
BEFORE INSERT ON invoices
FOR EACH ROW
EXECUTE FUNCTION calculate_invoice_total();
